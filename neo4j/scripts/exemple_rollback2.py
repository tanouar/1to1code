from neo4j import GraphDatabase, basic_auth

# Configuration de la connexion
URI = "bolt://localhost:7687"
AUTH = basic_auth("neo4j", "plbconsultant")

driver = GraphDatabase.driver(URI, auth=AUTH)

with driver.session() as session:
    print("\n--- √âtape 1 : V√©rification du n≈ìud Hulk ---")
    result = session.run("MATCH (c:Character {name: 'Hulk'}) RETURN c")
    record = result.single()
    if record:
        print("‚úÖ Hulk trouv√© :", record["c"])
    else:
        print("‚ùå Hulk n'existe pas encore, cr√©ation du n≈ìud...")
        session.run("CREATE (c:Character {name: 'Hulk', strength: 100, mood: 'angry'})")

    print("\n--- √âtape 2 : D√©marrage d'une transaction ---")
    tx = session.begin_transaction()

    try:
        print("‚û°Ô∏è  Mise √† jour du mood de Hulk dans la transaction...")
        tx.run("MATCH (c:Character {name: 'Hulk'}) SET c.mood = 'happy' RETURN c")

        print("  üí¨ Hulk est d√©sormais 'happy' dans la transaction (non commit√©e).")
        raise Exception("Simulation d'erreur : rollback imminent")

        # Si on voulait valider, on ferait :
        # tx.commit()
    except Exception as e:
        print("\n‚ö†Ô∏è  Exception d√©tect√©e :", e)
        tx.rollback()
        print("‚è™ Rollback effectu√©, les modifications sont annul√©es.")

    print("\n--- √âtape 3 : V√©rification apr√®s rollback ---")
    result = session.run("MATCH (c:Character {name: 'Hulk'}) RETURN c.mood AS mood")
    print("Mood actuel de Hulk :", result.single()["mood"])

driver.close()
